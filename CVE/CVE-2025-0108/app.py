from flask import Flask, request, session, redirect, url_for, abort

app = Flask(__name__)
app.secret_key = "very_secret_key"

# Simulated login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if request.form['username'] == 'admin' and request.form['password'] == 'password':
            session['logged_in'] = True
            return 'Logged in successfully!'
        return 'Invalid credentials.'
    return '''
        <form method="post">
            <input name="username">
            <input name="password" type="password">
            <input type="submit">
        </form>
    '''

# Intended protection
@app.route('/admin')
def admin():
    if not session.get('logged_in'):
        return redirect('/login')
    return 'Welcome to the admin panel.'

# üêû Simulated vulnerable path (auth bypass via malformed path)
@app.route('/admin/<path:subpath>')
def admin_bypass(subpath):
    # A real-world misconfigured reverse proxy may let this through
    if 'admin' in subpath:
        # Should not allow without session, but it's accidentally exposed
        return f'Bypassed access to admin via {subpath}'
    abort(404)

if __name__ == "__main__":
    app.run(debug=True, port=3400)
